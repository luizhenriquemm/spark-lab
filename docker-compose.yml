version: '3'

services:
  jupyter:
    container_name: jupyter
    build: images/jupyter/.
    user: root
    environment:
      PYTHON_VERSION: 3.11.6
      JUPYTER_TOKEN: "senha"
      NB_USER: "user"
      CHOWN_HOME: "yes"
      CHOWN_EXTRA_OPTS: "-R"
    ports:
      - 8888:8888
    volumes:
      - ${BASE_PATH}/data/jupyter:/home/user/work
      - ${BASE_PATH}/data/spark/jars:/opt/bitnami/spark/jars_external
    working_dir: /home/user/
    restart: unless-stopped
    networks:
      - default

  spark-master: 
    container_name: spark-master
    image: bitnami/spark:3.4.1
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: null
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    ports:
      - 7077:7077
      - 4040:8080
      - 6066:6066
    volumes:
      - ${BASE_PATH}/data/spark/conf:/opt/bitnami/spark/conf
      - ${BASE_PATH}/data/spark/jars:/opt/bitnami/spark/jars_external
    restart: unless-stopped
    networks:
      - default

  spark-worker-0:
    container_name: spark-worker-0
    image: bitnami/spark:3.4.1
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 32G
      SPARK_EXECUTOR_MEMORY: 32G
      SPARK_WORKER_CORES: 12
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    ports:
      - 4041:8081
    volumes:
      - ${BASE_PATH}/data/spark/conf:/opt/bitnami/spark/conf
      - ${BASE_PATH}/data/spark/jars:/opt/bitnami/spark/jars_external
    restart: unless-stopped
    networks:
      - default

  postgres:
    container_name: postgres
    image: postgres:16-alpine3.18
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
      POSTGRES_MULTIPLE_DATABASES: hive_metastore,metabase_app,airflow_app
    ports:
      - 9032:5432
    volumes:
      - ${BASE_PATH}/data/postgres/postgres:/data/postgres
      - ${BASE_PATH}/data/postgres/docker-entrypoint:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - default

  hive-metastore:
    container_name: hive-metastore
    image: apache/hive:4.0.0-beta-2-SNAPSHOT
    depends_on:
      - postgres
    environment:
      SERVICE_NAME: metastore
      HIVE_VERSION: 4.0.0-beta-2-SNAPSHOT
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      DB_DRIVER: postgres
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/hive_metastore -Djavax.jdo.option.ConnectionUserName=postgres -Djavax.jdo.option.ConnectionPassword=password"
    ports:
      - 9083:9083
    volumes:
      - ${BASE_PATH}/data/hive-metastore/conf:/hive_custom_conf
      - ${BASE_PATH}/data/hive-metastore/warehouse:/opt/hive/data/warehouse
      - ${BASE_PATH}/data/hive-metastore/lib:/opt/hive/lib
    restart: unless-stopped
    networks:
      - default

  minio:
    container_name: minio
    image: bitnami/minio:2023.11.11
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ${BASE_PATH}/data/minio/data:/bitnami/minio/data
    restart: unless-stopped
    networks:
      - default

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: 
      - 2181:2181
    restart: unless-stopped

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    ports: 
      - 29092:29092
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    restart: unless-stopped
    networks:
      - default

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    ports:
      - 9292:9000
    depends_on:
      - kafka
    restart: unless-stopped

  nifi:
    container_name: nifi
    image: apache/nifi:1.19.0
    environment:
      NIFI_WEB_HTTPS_PORT: 8443
      SINGLE_USER_CREDENTIALS_USERNAME: admin 
      SINGLE_USER_CREDENTIALS_PASSWORD: nifiadminpassword
      NIFI_ZK_CONNECT_STRING: zookeeper:2181
      NIFI_ELECTION_MAX_WAIT: 30 sec
    ports:
      - 8443:8443
    volumes:
      - ${BASE_PATH}/data/nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - ${BASE_PATH}/data/nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ${BASE_PATH}/data/nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - ${BASE_PATH}/data/nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ${BASE_PATH}/data/nifi/state:/opt/nifi/nifi-current/state
      - ${BASE_PATH}/data/nifi/logs:/opt/nifi/nifi-current/logs
      - ${BASE_PATH}/data/nifi/conf:/opt/nifi/nifi-current/conf
      - ${BASE_PATH}/data/hdfs/conf:/opt/nifi/nifi-current/hdfs-conf
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8091/nifi/}"
      interval: 60s
      timeout: 3s
      start_period: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - default
  
  nifi-registry:
    container_name: nifi-registry
    image: apache/nifi-registry:1.19.0
    ports:
      - 18080:18080
    environment:
      LOG_LEVEL: INFO
      NIFI_REGISTRY_WEB_HTTP_PORT: 18080
      NIFI_REGISTRY_DB_DIR: /opt/nifi-registry/nifi-registry-current/database
      NIFI_REGISTRY_FLOW_PROVIDER: file
      NIFI_REGISTRY_FLOW_STORAGE_DIR: /opt/nifi-registry/nifi-registry-current/flow_storage
    volumes: 
      - ${BASE_PATH}/data/nifi-registry/database:/opt/nifi-registry/nifi-registry-current/database 
      - ${BASE_PATH}/data/nifi-registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
    restart: unless-stopped
    networks:
      - default

  postgres-app-server:
    container_name: postgres-app-server
    image: postgres:16-alpine3.18
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app 
      PGDATA: /data/postgres
    ports:
      - 5432:5432
    volumes:
      - ${BASE_PATH}/data/postgres-app-server/postgres:/data/postgres
      - ${BASE_PATH}/data/app-server/db-init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - default

  postgres-debezium:
    container_name: postgres-debezium
    image: debezium/postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app 
      PGDATA: /data/postgres
    ports:
      - 5433:5432
    volumes:
      - ${BASE_PATH}/data/postgres-debezium/postgres:/data/postgres
      - ${BASE_PATH}/data/app-server/db-init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - default

  debezium-connect:
    container_name: debezium-connect
    image: debezium/connect:1.9
    ports:
      - 8083:8083
    environment:
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      BOOTSTRAP_SERVERS: kafka:29092
    volumes:
      - ${BASE_PATH}/data/debezium-connect/libs:/kafka/connect
    links:
      - zookeeper
      - postgres-debezium
    depends_on:
      - kafka
      - zookeeper
      - postgres-debezium  

  app-server:
    container_name: app-server
    image: python:3.8-slim-buster
    depends_on:
      - postgres-app-server
    entrypoint: /app/docker-entrypoint.sh
    environment:
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 5000
    ports:
      - 5000:5000
    volumes:
      - ${BASE_PATH}/data/app-server:/app
    restart: unless-stopped
    networks:
      - default

  trino:
    container_name: trino
    image: trinodb/trino:433
    ports:
      - 8000:8080
    volumes:
      - ${BASE_PATH}/data/trino/catalog:/etc/trino/catalog
    restart: unless-stopped
    networks:
      - default

  metabase:
    container_name: metabase
    image: metabase/metabase:v0.47.7
    depends_on:
      - postgres
    ports:
      - 3000:3000
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase_app
      MB_DB_PORT: 5432
      MB_DB_USER: postgres
      MB_DB_PASS: password
      MB_DB_HOST: postgres
      MB_PLUGINS_DIR: /plugins/
    volumes:
      - ${BASE_PATH}/data/metabase/plugins:/plugins
    restart: unless-stopped
    networks:
      - default
    
  mage:
    container_name: mage
    image: mageai/mageai:0.9.47
    command: mage start spark-lab
    environment:
      USER_CODE_PATH: /home/src/spark-lab
      ENV: dev
    ports:
      - 6789:6789
    volumes:
      - ${BASE_PATH}/data/mage:/home/src/
    restart: unless-stopped
    
networks:
  default:
    name: spark_lab